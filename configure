#!/bin/bash

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check if a library is available
check_lib() {
    if pkg-config --exists "$1"; then
        echo "Found $1"
        return 0
    else
        echo "Warning: $1 not found via pkg-config"
        return 1
    fi
}

# Check for required commands
for cmd in g++ pkg-config; do
    if ! command_exists $cmd; then
        echo "Error: $cmd is not installed"
        exit 1
    fi
done

# Check for required libraries
LIBS_TO_CHECK="glut glew gl glu"
for lib in $LIBS_TO_CHECK; do
    check_lib $lib
done

# Check for SOIL manually
if [ -f "/usr/include/SOIL/SOIL.h" ]; then
    echo "Found SOIL"
    SOIL_CFLAGS="-I/usr/include/SOIL"
    SOIL_LIBS="-lSOIL"
else
    echo "Error: SOIL library not found"
    exit 1
fi

# Check FMOD
FMOD_PATH="./fmodstudioapi20224linux"
if [ ! -d "$FMOD_PATH" ]; then
    echo "Error: FMOD directory not found"
    exit 1
fi

# Detect system architecture
ARCH=$(uname -m)
case $ARCH in
    x86_64)
        FMOD_LIB_PATH="x86_64"
        ;;
    i686|i386)
        FMOD_LIB_PATH="x86"
        ;;
    armv7l|armv6l)
        FMOD_LIB_PATH="arm"
        ;;
    aarch64)
        FMOD_LIB_PATH="arm64"
        ;;
    *)
        echo "Unsupported architecture: $ARCH"
        exit 1
        ;;
esac

echo "Detected architecture: $ARCH, using FMOD lib path: $FMOD_LIB_PATH"

# Check if FMOD libraries exist
FMOD_CORE_LIB="$FMOD_PATH/api/core/lib/$FMOD_LIB_PATH/libfmod.so"
FMOD_STUDIO_LIB="$FMOD_PATH/api/studio/lib/$FMOD_LIB_PATH/libfmodstudio.so"

if [ ! -f "$FMOD_CORE_LIB" ]; then
    echo "Error: FMOD core library not found at $FMOD_CORE_LIB"
    exit 1
fi

if [ ! -f "$FMOD_STUDIO_LIB" ]; then
    echo "Error: FMOD studio library not found at $FMOD_STUDIO_LIB"
    exit 1
fi

cat > Makefile << EOF
# Compiler
CXX := g++

# FMOD API path
FMOD_PATH := $FMOD_PATH

# Installation paths
INSTALL_PATH := /usr/local/games/lemmings
INSTALL_LIB_PATH := \$(INSTALL_PATH)/lib

# Compiler flags
CXXFLAGS := -std=c++11 -Wall -Wextra \\
    -I\$(FMOD_PATH)/api/core/inc \\
    -I\$(FMOD_PATH)/api/studio/inc \\
    \$(shell pkg-config --cflags glut glew gl glu) \\
    $SOIL_CFLAGS

# Linker flags
LDFLAGS := \\
    -L\$(FMOD_PATH)/api/core/lib/$FMOD_LIB_PATH \\
    -L\$(FMOD_PATH)/api/studio/lib/$FMOD_LIB_PATH

# Libraries
LIBS := -lfmod -lfmodstudio \$(shell pkg-config --libs glut glew gl glu) $SOIL_LIBS

# Source directory
SRC_DIR := src

# Object directory
OBJ_DIR := obj

# Source files
SRCS := \$(wildcard \$(SRC_DIR)/*.cpp)

# Object files
OBJS := \$(SRCS:\$(SRC_DIR)/%.cpp=\$(OBJ_DIR)/%.o)

# Executable name
EXEC := lemmings

# Main target
\$(EXEC): \$(OBJS)
	\$(CXX) \$(OBJS) -o \$(EXEC) \$(LDFLAGS) \$(LIBS)

# Rule for object files
\$(OBJ_DIR)/%.o: \$(SRC_DIR)/%.cpp
	@mkdir -p \$(OBJ_DIR)
	\$(CXX) \$(CXXFLAGS) -c \$< -o \$@

# Install target
install: \$(EXEC)
	install -d \$(INSTALL_PATH)
	install -d \$(INSTALL_LIB_PATH)
	install -m 755 \$(EXEC) \$(INSTALL_PATH)
	if [ -d Game ]; then \\
		cp -R Game/* \$(INSTALL_PATH); \\
	else \\
		echo "Warning: Game directory not found. Game assets may be missing."; \\
	fi
	for lib in \$(FMOD_PATH)/api/core/lib/$FMOD_LIB_PATH/libfmod*.so*; do \\
		if [ -f "\$$lib" ]; then \\
			install -m 644 "\$$lib" \$(INSTALL_LIB_PATH); \\
		fi \\
	done
	for lib in \$(FMOD_PATH)/api/studio/lib/$FMOD_LIB_PATH/libfmodstudio*.so*; do \\
		if [ -f "\$$lib" ]; then \\
			install -m 644 "\$$lib" \$(INSTALL_LIB_PATH); \\
		fi \\
	done
	if [ -f \$(INSTALL_LIB_PATH)/libfmod.so.* ]; then \\
		(cd \$(INSTALL_LIB_PATH) && ln -sf libfmod.so.* libfmod.so); \\
	fi
	if [ -f \$(INSTALL_LIB_PATH)/libfmodstudio.so.* ]; then \\
		(cd \$(INSTALL_LIB_PATH) && ln -sf libfmodstudio.so.* libfmodstudio.so); \\
	fi
	@echo "Creating launch script..."
	@echo '#!/bin/bash' > /usr/local/bin/lemmings
	@echo 'cd \$(INSTALL_PATH) && LD_LIBRARY_PATH=\$(INSTALL_LIB_PATH):\$$LD_LIBRARY_PATH ./lemmings' >> /usr/local/bin/lemmings
	chmod +x /usr/local/bin/lemmings
	@echo "Updating library cache..."
	echo \$(INSTALL_LIB_PATH) > /etc/ld.so.conf.d/lemmings.conf
	ldconfig

# Clean rule
clean:
	rm -rf \$(OBJ_DIR) \$(EXEC)

# Uninstall target
uninstall:
	rm -rf \$(INSTALL_PATH)
	rm -f /usr/local/bin/lemmings
	rm -f /etc/ld.so.conf.d/lemmings.conf
	ldconfig

# Phony targets
.PHONY: clean install uninstall
EOF

echo "Configuration complete. Makefile has been created."
echo "You can now run 'make' to build the project."
echo "After building, run 'sudo make install' to install the game."
